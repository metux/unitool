
package org.de.metux.unitool.db;

import org.de.metux.util.StoreFile;
import org.de.metux.util.StrUtil;
import org.de.metux.util.PathNormalizer;
import org.de.metux.unitool.base.LibraryInfo;

public class StoreLibtoolArchive
{
    public static void store(LibraryInfo inf, String la_file)
    {
	String fn_short = PathNormalizer.basename(la_file);

	System.out.println("StoreLibtoolArchive.store() module_name="+inf.module_name);
	System.out.println("                            library_name="+inf.library_name);
	System.out.println("                            arname="+inf.arname);
	System.out.println("                            dlname="+inf.dlname);

	if (inf.dependency_names==null)
	    throw new RuntimeException("Uh, no dependency names !");

	String text =
	    "# "+fn_short+" - a libbtool library file\n"+
	    "# Generated by ltmain.sh - GNU libtool 1.5.0a\n"+
	    "#\n"+
	    "# Well, in fact generated by meTUX unitool \n"+
	    "#\n"+
	    "\n"+
	    "# The name that we can dlopen(3).\n"+
	    "dlname='"+StrUtil.fix_notnull(inf.dlname)+"'\n"+
	    "\n"+
	    "# Names of this library.\n"+
	    "library_names='"+StrUtil.fold(inf.dynamic_libnames).trim()+"'\n"+
	    "\n"+
	    "# The name of the static archive.\n"+
	    "old_library='"+StrUtil.fix_notnull(inf.arname)+"'\n"+
	    "\n"+
	    "dependency_libs='"+StrUtil.fold(inf.dependency_names).trim()+"'\n"+
	    "\n"+
	    "# Version information for "+inf.library_name.trim()+".\n"+
	    "current="+inf.version_current+"\n"+
	    "age="+inf.version_age+"\n"+
	    "revision="+inf.version_revision+"\n"+
	    "\n"+
	    "release='"+StrUtil.fix_notnull(inf.release).trim()+"'\n"+
	    "\n"+
	    "# Is this an already installed library ?\n"+
	    "installed="+(inf.installed ? "yes" : "no")+"\n"+
	    "\n"+
	    "# Files to dlopen/dlpreopen\n"+
	    "dlopen='"+StrUtil.fix_notnull(inf.param_dlopen).trim()+"'\n"+
	    "dlpreopen='"+StrUtil.fix_notnull(inf.param_dlpreopen).trim()+"'\n"+
	    "\n"+
	    "# Directory that library needs to be installed in\n"+
	    "libdir='"+StrUtil.fix_notnull(inf.libdir).trim()+"'\n"+
	    "\n";

	StoreFile.store(la_file, text);
    }
}
